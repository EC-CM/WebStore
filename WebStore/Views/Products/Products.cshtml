@model WebStore.Models.ViewModel

@{
    ViewBag.Title = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>

    .col {
        margin-bottom: 38px;
    }



    .a-blank {
        color: inherit;
        text-decoration: none;
    }

        .a-blank:hover,
        .card:hover .card-text h5 {
            color: #1e9469 !important;
            text-decoration: none !important;
        }

    .card {
        width: 18rem;
        margin-right: 5px;
        background-color: #181a1b;
        padding: 0;
    }

    .card-text h5 {
        font-size: .875rem;
        font-weight: 500;
        line-height: 2rem;
        text-align: center;
        color: rgb(232, 230, 227);
        width: 100%;
        word-break: break-word;
    }

    .bi-heart-fill:hover,
    .bi-heart {
        color: black;
        text-decoration: none !important;
        background-color: transparent;
        border: none;
        /* <i class="bi bi-heartbreak-fill"></i> */
    }

        .bi-heart:hover,
        .bi-heart-fill {
            color: red;
            text-decoration: none !important;
            background-color: transparent;
            border: none;
        }

    .add-to-cart {
        background-color: #1e9469;
        border: 1px solid #186e57;
        color: white;
    }

        .add-to-cart:hover {
            background-color: #136144;
        }
</style>

<div class="page">

    <h1 class="text-center m-4"><a href="@Url.Action("Index", "Products")" style="text-decoration: none !important; color:white; font-weight:500;">Products</a></h1>
    <hr class="my-4">




    @if (Model.Category.CategoryID != 0)
    {
        <h2 class="text-center m-4">@Model.Category.Name</h2>
    }
    else if (Model.SearchPhrase != "")
    {
        <h2 class="text-center m-4">Results matching: @Model.SearchPhrase</h2>
    }
    else
    {
        <h2 class="text-center m-4">All</h2>
    }

    <div class="dropdown text-end" id="sortby" style="margin-bottom:20px;">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Sort by @Model.Sort @(Model.Sort != WebStore.Models.ViewModel.SortBy.Default ? $"({Model.Order})" : "")
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            <li><a class="dropdown-item active" href="@Url.Action("Index", "Products", new {searchPhrase = Model.SearchPhrase, category = Model.Category.CategoryID, sort = WebStore.Models.ViewModel.SortBy.Default})">Default</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Index", "Products", new {searchPhrase = Model.SearchPhrase, category = Model.Category.CategoryID, sort = WebStore.Models.ViewModel.SortBy.Price, sortOrder = WebStore.Models.ViewModel.SortOrder.Ascending})">Price: Low to high</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Index", "Products", new {searchPhrase = Model.SearchPhrase, category = Model.Category.CategoryID, sort = WebStore.Models.ViewModel.SortBy.Price, sortOrder = WebStore.Models.ViewModel.SortOrder.Descending})">Price: High to low</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Index", "Products", new {searchPhrase = Model.SearchPhrase, category = Model.Category.CategoryID, sort = WebStore.Models.ViewModel.SortBy.Name, sortOrder = WebStore.Models.ViewModel.SortOrder.Ascending})">Name: A-Z</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Index", "Products", new {searchPhrase = Model.SearchPhrase, category = Model.Category.CategoryID, sort = WebStore.Models.ViewModel.SortBy.Name, sortOrder = WebStore.Models.ViewModel.SortOrder.Descending})">Name: Z-A</a></li>
        </ul>
    </div>



    <div class="container-fluid text-center">
        <div class="row row-cols-auto">
            @foreach (WebStore.Models.Product product in Model.Products)
            {
                <div class="col">
                    <div class="card mb-3 position-relative h-100">

                        <div style="height: 300px; background-color: white; position: relative;">

                            <!-- Product image -->
                            <a href="@Url.Action("Details", "Products", new {productID = product.ProductID})" class="text-link">
                                <img src="@Url.Action("GetImage", "Images", new { id = product.DefaultImageID, height = 300, width = 300 })" class="card-img-top" alt="[Product Image]" style="width: 100%; height: 100%; object-fit: cover;" />
                            </a>

                            <!-- Favourite button -->
                            <button data-product-id="@product.ProductID" class="bi-heart position-absolute top-0 end-0 m-3" onclick="ToggleFavourite(event, @product.ProductID, '@product.Name')"></button>


                        </div>

                        <div class="card-body">

                            <!-- Product title -->
                            <a href="@Url.Action("Details", "Products", new {productID = product.ProductID})" class="text-link">
                                <h5 class="card-title">@Html.DisplayFor(p => product.Name)</h5>
                            </a>

                            <!-- Product category -->
                            <p class="card-text">Category: <a href="@Url.Action("Index", "Products", new { category = product.CategoryID } )">@Html.DisplayFor(p => product.Category.Name)</a></p>

                        </div>

                        <!-- Price & Cart button -->
                        <div class="card-footer d-flex align-items-center justify-content-between" style="margin: 10px 0;">
                            <p class="card-text" style="font-weight: bold; font-size: 1.4em; margin-bottom: 0; color: white;">£@Html.DisplayFor(p => product.Price)</p>
                            <button data-cart-user-id="1" data-cart-product-id="@product.ProductID" class="btn btn-success add-to-cart" onclick="ToggleInCart(event, 1, @product.ProductID)"><span class="button-text">Add to Cart</span> <i class="bi bi-cart2"></i></button>
                        </div>

                    </div>
                </div>
            }
        </div>
    </div>

</div>

<script>

    function ToggleFavourite(event, productID, productName)
    {
        //var classes = event.currentTarget.classList;
        var buttonElement = $(event.currentTarget);

        if (buttonElement.hasClass('bi-heart'))
        // ADD NEW FAVOURITE
        {
            $.ajax({
                url: "@Url.Action("AddFavourite", "Users")",
                method: "Post",
                data:
                {
                    userID: 1,
                    productID: productID
                },
                success: function (data) {
                    //alert("Item added to favourites.");

                    // Fill/unfill heart icon
                    buttonElement.toggleClass('bi-heart bi-heart-fill');
                },
                error: function (error) { console.log(`Error adding Product ${productID} to User ${userID}\'s favourites.\n\n${JSON.stringify(error) }`); }
            });
        }
        // NOTE: Cannot easily change default focus from OK to Cancel
        else if (buttonElement.hasClass('bi-heart-fill') && window.confirm(`Remove ${productName} from favourites?`))
        // REMOVE FAVOURITE
        {
            $.ajax(
            {
                url: "@Url.Action("RemoveFavourite", "Users")",
                method: "Post",
                data:
                {
                    userID: 1,
                    productID: productID
                },
                success: function (data) {
                    //alert("Item removed from favourites.");

                    // Fill/unfill heart icon
                    buttonElement.toggleClass('bi-heart bi-heart-fill');
                },
                    error: function (error) { console.log(`Error removing Product ${productID} from User ${userID}\'s favourites.\n\n${JSON.stringify(error)}`); }
            });
        }
    }

    function CheckIfFavourited(userID, productID, buttonElement)
    {
        $.ajax(
        {
            url: "@Url.Action("IsFavourited", "Users")",
            method: "Post",
            data:
            {
                userID: userID,
                productID: productID
            },
            success: function (data)
            {
                if (data === "True")
                {
                    console.log(`Product ${productID} was found in User ${userID}\'s favourites - updating button.`);
                    // Change button to match favourited status
                    buttonElement.addClass('bi-heart-fill');
                    buttonElement.removeClass('bi-heart');
                }

            },
            error: function (error) { console.log(`Error checking if Product ${productID} is in User ${userID}\'s favourites.\n\n${JSON.stringify(error)}`); }
        });

    }

    function ToggleInCart(event, userID, productID)
    {
        var buttonElement = $(event.currentTarget);
        var buttonText = buttonElement.children('.button-text');

        if (buttonElement.hasClass('in-cart'))
        // REMOVE FROM CART
        {
            $.ajax(
            {
                url: "@Url.Action("RemoveFromCart", "UserCarts")",
                method: "Post",
                data:
                {
                    userID: userID,
                    productID: productID
                },
                success: function (data) {
                    // Change button to match cart status
                    buttonText.text("Add to Cart");
                    buttonElement.removeClass('in-cart');
                    UpdateCartBadge(userID);
                },
                error: function (error) { console.log(`Error removing Product ${productID} from User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }
            });
        }

        else
        // ADD TO CART
        {
            $.ajax({
                url: "@Url.Action("AddToCart", "UserCarts")",
                method: "Post",
                data:
                {
                    userID: userID,
                    productID: productID,
                    quantity: 1
                },
                success: function (data) {
                    // Change button to match cart status
                    buttonText.text("In Cart");
                    buttonElement.addClass('in-cart');
                    UpdateCartBadge(userID);
                },
                error: function (error) { console.log(`Error adding Product ${productID} to User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }
            });
        }
    }


    function CheckIfInCart(userID, productID, buttonElement)
    {
        var buttonText = buttonElement.children('.button-text');

        $.ajax(
        {
            url: "@Url.Action("IsInCart", "UserCarts")",
            method: "Post",
            data:
            {
                userID: userID,
                productID: productID
            },
            success: function (data)
            {
                if (data >= 1)
                {
                    console.log(`Product ${productID} was found in User ${userID}\'s cart - updating button.`);
                    // Change button to match cart status
                    buttonText.text("In Cart");
                    buttonElement.addClass('in-cart');
                }

            },
            error: function (error) { console.log(`Error checking if Product ${productID} is in User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }

        });

    }

    // When the page is rendered
    $(document).ready
    (   function ()
    {
            // For each button element with a favourite data attribute
            $('[data-product-id]').each
            (   function ()
                {
                    // Extract value of product-id
                    var productID = $(this).data('product-id');
                    // Check if the corresponding product is favourited and toggle the button appearance
                    CheckIfFavourited(1, productID, $(this))


                }
            )

            // For each button element with cart data attributes
            $('[data-cart-product-id]').each
            (   function ()
                {
                    // Extract value of product-id
                    var userID = $(this).data('cart-user-id');
                    var productID = $(this).data('cart-product-id');
                    // Check if the corresponding product is favourited and toggle the button appearance
                    CheckIfInCart(userID, productID, $(this))


                }
            )

        }

    )

</script>


