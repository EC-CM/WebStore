@model WebStore.Models.ViewModel

@{
    ViewBag.Title = "ProductDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>

    .product-page {
        display: flex;
        flex-direction: row;
    }

    .add-to-cart {
        background-color: #1e9469;
        border: 1px solid #186e57;
        color: white;
    }

        .add-to-cart:hover {
            background-color: #136144;
        }
</style>


<div class="page">

    <div class="container product-page">

        <div class="container d-flex position-relative justify-content-center align-items-center" id="ImageGalleryContainer">
            <!-- Handle cases where default image is not the first in the list and elsewhere (remove it before looping) -->
            <!-- Fullscreen images when clicking on them? -->

            @if (Model.ProductImages.Count != 0)
            {
                var imageCount = 1;

                <!-- Previous image navigation button -->
                <button class="carousel-control-prev" type="button" data-bs-target="#imageGallery" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>

                <!-- Image carousel (minus navigation buttons) -->
                <div id="imageGallery" class="carousel slide d-flex flex-column mb-3" style="margin-left: 30px; margin-right: 30px;">

                    <!-- The actual images (as slides) -->
                    <div class="carousel-inner" style="max-width: 500px; background-color: white;">

                        <div class="carousel-item active">
                            <img src="@Url.Action("GetImage", "Images", new {id = Model.ProductImages[0].ImageID, height = 500, width = 500})" class="d-block w-100 img-fluid" alt="Image 1">
                        </div>

                        @{
                            imageCount = 1;
                        }

                        @foreach (WebStore.Models.ProductImage productImage in Model.ProductImages.Skip(1))
                        {
                            <div class="carousel-item">
                                <img src="@Url.Action("GetImage", "Images", new {id = Model.ProductImages[imageCount].ImageID, height = 500, width = 500})" class="d-block w-100 img-fluid" alt="Image @(imageCount + 1)">
                            </div>

                            imageCount += 1;
                        }

                    </div>

                <!-- Image number indicators -->
                <div class="carousel-indicators position-relative">

                    <button type="button" data-bs-target="#imageGallery" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Go To Image 1"></button>

                    @{
                        imageCount = 1;
                    }

                    @foreach (WebStore.Models.ProductImage productImage in Model.ProductImages.Skip(1))
                    {
                        <button type="button" data-bs-target="#imageGallery" data-bs-slide-to="@imageCount" aria-label="Go To Image @(imageCount + 1)"></button>

                        imageCount += 1;
                    }

                </div>

            </div>

                <!-- Next image navigation button -->
                <button class="carousel-control-next" type="button" data-bs-target="#imageGallery" data-bs-slide="next" style="position: absolute; top: 50%; transform: translateY(-50%); z-index: 1;">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            }
        </div>


        <div class="container d-flex flex-column" id="ProductDetails">

            <h1 style="font-weight:600; font-size:2.5rem; text-align:center">@Html.DisplayFor(model => model.Product.Name)</h1>

            <div class="container" id="productCategory">
                <b>Category:</b> <a href="@Url.Action("Index", "Products", new { category = Model.Product.CategoryID } )">@Html.DisplayFor(p => Model.Product.Category.Name)</a>
            </div>

            <div class="container" id="productDescription">
                <span class="mb-3"><b>@Html.DisplayNameFor(model => model.Product.Description): </b></span>
                <p>@Html.DisplayFor(model => model.Product.Description)</p>
            </div>

            <div class="container d-flex flex-column" id="priceDetails" style="background-color: rgb(48, 48, 48); border: 1px solid black; color: white; width: fit-content">
                <span class="flex-fill" style="font-weight:800; font-size:1.5rem; margin-right: 10px;">£@Html.DisplayFor(model => model.Product.Price)</span>
                <button data-cart-user-id="1" data-cart-product-id="@Model.Product.ProductID" class="btn btn-success add-to-cart" onclick="ToggleInCart(event, 1, @Model.Product.ProductID)"><span class="button-text">Add to Cart</span> <i class="bi bi-cart2"></i></button>
            </div>

        </div>

    </div>
</div>




<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Product.ProductID }) |
    @Html.ActionLink("Back to List", "Index")
</p>


<script>

    function ToggleInCart(event, userID, productID)
    {
        var buttonElement = $(event.currentTarget);
        var buttonText = buttonElement.children('.button-text');

        if (buttonElement.hasClass('in-cart'))
        // REMOVE FROM CART
        {
            $.ajax(
            {
                url: "@Url.Action("RemoveFromCart", "UserCarts")",
                method: "Post",
                data:
                {
                    userID: userID,
                    productID: productID
                },
                success: function (data) {
                    // Change button to match cart status
                    buttonText.text("Add to Cart");
                    buttonElement.removeClass('in-cart');
                    UpdateCartBadge(userID);
                },
                error: function (error) { console.log(`Error removing Product ${productID} from User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }
            });
        }

        else
        // ADD TO CART
        {
            $.ajax({
                url: "@Url.Action("AddToCart", "UserCarts")",
                method: "Post",
                data:
                {
                    userID: userID,
                    productID: productID,
                    quantity: 1
                },
                success: function (data) {
                    // Change button to match cart status
                    buttonText.text("In Cart");
                    buttonElement.addClass('in-cart');
                    UpdateCartBadge(userID);
                },
                error: function (error) { console.log(`Error adding Product ${productID} to User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }
            });
        }
    }


    function CheckIfInCart(userID, productID, buttonElement)
    {
        var buttonText = buttonElement.children('.button-text');

        $.ajax(
        {
            url: "@Url.Action("IsInCart", "UserCarts")",
            method: "Post",
            data:
            {
                userID: userID,
                productID: productID
            },
            success: function (data)
            {
                if (data >= 1)
                {
                    console.log(`Product ${productID} was found in User ${userID}\'s cart - updating button.`);
                    // Change button to match cart status
                    buttonText.text("In Cart");
                    buttonElement.addClass('in-cart');
                }

            },
            error: function (error) { console.log(`Error checking if Product ${productID} is in User ${userID}\'s cart.\n\n${JSON.stringify(error)}`); }

        });

    }

    // When the page is rendered
    $(document).ready
        (function () {
            // For each button element with a favourite data attribute
            $('[data-product-id]').each
                (function () {
                    // Extract value of product-id
                    var productID = $(this).data('product-id');
                    // Check if the corresponding product is favourited and toggle the button appearance
                    CheckIfFavourited(1, productID, $(this))


                }
                )

            // For each button element with cart data attributes
            $('[data-cart-product-id]').each
                (function () {
                    // Extract value of product-id
                    var userID = $(this).data('cart-user-id');
                    var productID = $(this).data('cart-product-id');
                    // Check if the corresponding product is favourited and toggle the button appearance
                    CheckIfInCart(userID, productID, $(this))


                }
                )

        }

    )    // When the page is rendered
    $(document).ready
        (function () {
            // For each button element with cart data attributes
            $('[data-cart-product-id]').each
                (function ()
                {
                    // Extract value of product-id
                    var userID = $(this).data('cart-user-id');
                    var productID = $(this).data('cart-product-id');
                    // Check if the corresponding product is favourited and toggle the button appearance
                    CheckIfInCart(userID, productID, $(this))


                })

        })
</script>