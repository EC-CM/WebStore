@model WebStore.Models.ViewModel

@{
    ViewBag.Title = "Favourites List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>

    .col {
        margin-bottom: 38px;
    }



    .a-blank {
        color: inherit;
        text-decoration: none;
    }

        .a-blank:hover,
        .card:hover .card-text h5 {
            color: #1e9469 !important;
            text-decoration: none !important;
        }

    .card {
        width: 18rem;
        margin-right: 5px;
        background-color: #181a1b;
        padding: 0;
    }


    .card-text h5 {
        font-size: .875rem;
        font-weight: 500;
        line-height: 2rem;
        text-align: center;
        color: rgb(232, 230, 227);
        width: 100%;
        word-break: break-word;
    }

    .bi-heart-fill:hover,
    .bi-heart {
        color: black;
        text-decoration: none !important;
        background-color: transparent;
        border: none;
        /* <i class="bi bi-heartbreak-fill"></i> */
    }

        .bi-heart:hover,
        .bi-heart-fill {
            color: red;
            text-decoration: none !important;
            background-color: transparent;
            border: none;
        }

    .add-to-cart {
        background-color: #1e9469;
        border: 1px solid #186e57;
        color: white;
    }

        .add-to-cart:hover {
            background-color: #136144;
        }
</style>

<div class="page">

    <h1 class="text-center m-4">@Model.User.Forename's Favourites</h1>
    <hr class="my-4">

    <!-- Sort removed for now -->

    <div class="container-fluid text-center">
        <div class="row row-cols-auto">
            @foreach (WebStore.Models.Product product in Model.Products)
            {
                <div class="col">
                    <div class="card-container d-flex flex-column h-100 mb-auto">

                        <span style="color:darkgrey;">Added: @(Model.UserListItems.FirstOrDefault(uli => uli.ProductID == product.ProductID)?.Timestamp)</span>

                        <div class="card position-relative h-100">

                            <!-- DEBUG CODE FOUND ONLINE -->
                            <!--<pre>@Newtonsoft.Json.JsonConvert.SerializeObject(product, Newtonsoft.Json.Formatting.Indented)</pre>-->

                            <div style="height: 300px; background-color: white; position: relative;">

                                <!-- Product image -->
                                <a href="@Url.Action("Details", "Products", new {productID = product.ProductID})" class="text-link">
                                    <img src="@Url.Action("GetImage", "Images", new { id = product.DefaultImageID, height = 300, width = 300 })" class="card-img-top" alt="[Product Image]" style="width: 100%; height: 100%; object-fit: cover;" />
                                </a>

                                <!-- Favourite button -->
                                <button class="bi-heart-fill position-absolute top-0 end-0 m-3" onclick="RemoveFavourite(event, 1, @product.ProductID, '@product.Name')"></button>

                            </div>

                            <div class="card-body">

                                <!-- Product title -->
                                <a href="@Url.Action("Details", "Products", new {productID = product.ProductID})" class="text-link">
                                    <h5 class="card-title">@Html.DisplayFor(p => product.Name)</h5>
                                </a>

                                <!-- Product category -->
                                <p class="card-text">Category: <a href="@Url.Action("Index", "Products", new { category = product.CategoryID } )">@Html.DisplayFor(p => product.Category.Name)</a></p>

                            </div>

                            <!-- Price & Cart button -->
                            <div class="card-footer d-flex align-items-center justify-content-between" style="margin: 10px 0;">
                                <p class="card-text" style="font-weight: bold; font-size: 1.4em; margin-bottom: 0; color: white;">£@Html.DisplayFor(p => product.Price)</p>
                                <button class="btn btn-success add-to-cart">Add to Cart <i class="bi bi-cart2"></i></button>
                            </div>

                        </div>

                        @{
                            var productNotes = (Model.UserListItems.FirstOrDefault(uli => uli.ProductID == product.ProductID)?.Notes);
                        }

                        <div class="notes-container">
                            <button onclick="UpdateNotes(this, @product.ProductID, '@productNotes' );" style="background-color: transparent; border: none;">
                                @if (productNotes != "")
                                {
                                    <span style="color:darkgrey;"><i>"@productNotes"</i></span>
                                }
                                else
                                {
                                    <i class="bi bi-pencil-square" style="color:darkgrey;">&nbsp;&nbsp;Add a note...</i>
                                }
                            </button>
                        </div>

                    </div>
                </div>
            }
        </div>
    </div>

</div>

<script>

    function RemoveFavourite(event, userID, productID, productName)
    {

        var confirmed = window.confirm(`Remove ${productName} from favourites?`);

        var buttonElement = $(event.target);

        if (confirmed)
        {
            // REMOVE FAVOURITE
            $.ajax(
            {
                url: "@Url.Action("RemoveFavourite", "Users")",
                method: "Post",
                data:
                {
                    userID: userID,
                    productID: productID
                },
                success: function (data) {
                    //alert("Item removed from favourites.");

                    // Delete card from view by deleting its containing column (to ensure proper spacing)
                    buttonElement.closest('.col').remove();
                },
                    error: function (error) { console.log(`Error removing Product ${productID} from User ${userID}\'s favourites.\n\n${JSON.stringify(error)}`); }
            });
        }

    }

    function UpdateNotes(buttonElement, productID, productNotes)
    {
        var notesContainer = buttonElement.parentNode;

        notesContainer.innerHTML = "";

        var space = String.fromCharCode(160, 160);

        var pencilIcon = document.createElement('i');
        pencilIcon.className = 'bi bi-pencil-square';
        pencilIcon.style.color = 'darkgrey';

        var inputField = document.createElement('input');
        inputField.type = 'text';
        inputField.value = productNotes;
        inputField.id = 'notesInput';

        var submitButton = document.createElement('button');
        submitButton.className = 'bi bi-check-square';
        submitButton.style.cssText = 'color: green; background-color: transparent; border: 0;';
        submitButton.addEventListener('click', function () {
            UpdateFavouriteItemNotes(1, productID, inputField.value);
            CloseNoteEdit(notesContainer, productID, inputField.value);
        });

        var closeButton = document.createElement('button');
        closeButton.className = 'bi bi-x-square';
        closeButton.style.cssText = 'color: red; background-color: transparent; border: 0 ;';
        closeButton.addEventListener('click', function () {
            CloseNoteEdit(notesContainer, productID, productNotes);
        });

        notesContainer.append(pencilIcon, space, inputField, space, submitButton, space, closeButton)

    }

    function CloseNoteEdit(notesContainer, productID, productNotes) {

        var buttonElement = document.createElement('button');
        buttonElement.setAttribute('onclick', `UpdateNotes(this, ${productID}, '${productNotes}');`);
        buttonElement.style.backgroundColor = 'transparent';
        buttonElement.style.border = 'none';

        var notesSpan = document.createElement('span');
        notesSpan.style.color = 'darkgrey';
        notesSpan.style.fontStyle = 'italics';

        if (productNotes !== "")
        {
            notesSpan.textContent = `"${productNotes}"`;


        }
        else
        {
            notesSpan.className = 'bi bi-pencil-square';
            notesSpan.innerHTML = '&nbsp;&nbsp;Add a note...';
        }

        buttonElement.appendChild(notesSpan);
        notesContainer.innerHTML = '';
        notesContainer.appendChild(buttonElement);
    }


    function UpdateFavouriteItemNotes(userID, productID, productNotes)
    {

        $.ajax(
        {
            url: "@Url.Action("UpdateFavouriteNotes", "Users")",
            method: "Post",
            data:
            {
                userID: userID,
                productID: productID,
                productNotes: productNotes
            },
            success: function (data)
            {
                console.log(`Updated notes for favourited product ${productID}.`)
            },
            error: function (error) { console.log(`Error updating notes for Product ${productID} in User ${userID}\'s favourites.\n\n${JSON.stringify(error)}`); }
        });

    }




</script>
